{"version":3,"file":"tone-processor.js","mappings":"SAAA;SACA;;;;;UCDA;UACA;UACA;UACA,uDAAuD,iBAAiB;UACxE;UACA,gDAAgD,aAAa;UAC7D,E;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACU","sources":["webpack://synth-root/webpack/bootstrap","webpack://synth-root/webpack/runtime/make namespace object","webpack://synth-root/./workspaces/processors/src/tone-processor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","class ToneProcessor extends AudioWorkletProcessor {\n    frequencies = new Set();\n    waveform = 'square';\n    constructor() {\n        super();\n        this.port.onmessage = (event) => {\n            const msg = event.data;\n            switch (msg.type) {\n                case 'noteOn':\n                    this.frequencies.add(msg.frequency);\n                    break;\n                case 'noteOff':\n                    this.frequencies.delete(msg.frequency);\n                    break;\n                case 'setWaveform':\n                    console.log(msg.waveform);\n                    this.waveform = msg.waveform;\n                    break;\n            }\n        };\n    }\n    process(inputs, outputs) {\n        outputs.forEach((output) => {\n            output.forEach((channel) => {\n                for (let i = 0; i < channel.length; i++) {\n                    //current frame is the total number of process calls since we started.\n                    const currentSample = currentFrame + i;\n                    let sampleSum = 0;\n                    this.frequencies.forEach((frequency) => {\n                        const period = (sampleRate / frequency);\n                        const phase = currentSample % period;\n                        const normalizedPhase = phase / period;\n                        sampleSum += this.determineOutputSample(normalizedPhase);\n                    });\n                    channel[i] = Math.tanh(sampleSum);\n                }\n            });\n        });\n        return true;\n    }\n    determineOutputSample(normalizedPhase) {\n        switch (this.waveform) {\n            case 'saw':\n                return 2 * normalizedPhase - 1;\n            case 'sine':\n                return Math.sin(2 * Math.PI * normalizedPhase);\n            case 'triangle':\n                return 4 * Math.abs(normalizedPhase - 0.5) - 1;\n            default:\n                //we'll fall back to square I guess\n                return normalizedPhase < 0.5 ? 1 : -1;\n        }\n    }\n}\nregisterProcessor(\"tone-processor\", ToneProcessor);\nexport {};\n"],"names":[],"sourceRoot":""}